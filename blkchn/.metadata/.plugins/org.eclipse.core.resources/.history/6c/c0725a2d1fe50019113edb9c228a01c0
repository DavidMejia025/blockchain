package blockchain.node.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import blockchain.node.core.Block;
import blockchain.node.core.BlockChain;
import blockchain.node.core.Node;


@RestController
public class NodeController {
  @Autowired
  Node node;
  
  //BlockChain blockchain = node.getBlockChain() ; //should be improved with setter DI 
  
  @GetMapping("/init")
  public String nodeInit(String[] args) {
	BlockChain blockchain = node.getBlockChain();
    Block      root       = blockchain.getLastBlock();
    
    return "Blockchain with root node that has previous hash eq = " + root.getPrevHash() + " was created";
  }
  
  @PostMapping(value = "/mine", headers="Accept=application/json", consumes = "application/JSON")
  public Map<String, String>  postMine(@RequestBody String params) throws IOException, Exception {
    int nonce = parseJsonMine(params);
    
    BlockChain blockchain = node.getBlockChain();
    
    Map<String, String> response = blockchain.mineBlock(nonce);
    System.out.println(response);
    
    //Map<String, String> response = sayHello(); //Wy json object is not working on the client side?
    return response;
  }
  
  @GetMapping("/last-nonce")
  public String getLastNounce(String[] args) {
	BlockChain blockchain = node.getBlockChain();
    Block      root       = blockchain.getLastBlock();
    
    JSONObject json = new JSONObject();
    
    json.put("difficulty", blockchain.getDifficulty());
    json.put("nonce", root.getNonce());
    
    return json.toString();
  }
  
  @PostMapping(value = "/add-transaction", headers="Accept=application/json", consumes = "application/JSON")
  public void postAddTransaction(@RequestBody String params) throws IOException, Exception {
    String[] transactionParams = parseJsonTransaction(params);
    
    BlockChain blockchain = node.getBlockChain();
    
    int value = Integer.parseInt(transactionParams[2]);
    
    blockchain.addTransaction(transactionParams[0], transactionParams[1], value); //convert to has map?
    
    System.out.println(transactionParams[1]);
  }
  
  private Integer parseJsonMine(String json) {
    JSONObject obj = new JSONObject(json);
    
    return (int) obj.get("nonce");
  }
  
  private String[] parseJsonTransaction(String json) {
    JSONObject obj = new JSONObject(json);
    String[] stringArray = new String[3];
    
    stringArray[0] = obj.getString("sender");
    stringArray[1] = obj.getString("receiver");
    stringArray[2] = Integer.toString((int) obj.get("value"));

    return stringArray;
  }
  /*
  private JSONObject buildResponse(String status, int index) { // This kind of things made me think to pass this to a service package
	    JSONObject response = new JSONObject();
	    
	    response.put("status", status);
	    response.put("blockId", Integer.toString(index));
	    
	    return response;
	  }*/
}
